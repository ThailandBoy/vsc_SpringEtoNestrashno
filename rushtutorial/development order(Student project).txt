 
	1. Создание проекта (Spring boot) maven
		1.2. Добавить зависимость "Spring WEB"
	2. Ввод зависимостей в мавен. // например Spring Data JPA, H2 Database.  Для базы данных используем H2 Database.
		2.1. Spring Data JPA - для работы Spring c базой данных, туда включен hibernate.
		2.2. H2 - эмуляция базы данных без скачиваний, установок и сложных конфигураций.
	3. Создаем конфигурационный файл application.yml (название очень важно). // в папке resources
	4. Перед тем как заполнять h2 базу. Необходимо создать класс утилиту для запуска в ней методов по заполнению базы.
		4.1. создаем пакет для утилит "utils".
		4.2. И саму утилиту InitiateUtils. Класс нужен в качестве альтернативы классу Applications, так как он должен отвечать только
			за запуск приложения.
	5. Создадим сущности.
		5.1. Создаем пакет для сущностей (entities).
		5.2. Сущность фрукты.
	6. Сущность взаимодействует с базой и хранит в себе данные из БД. Сущность при деле.
		Но кто-то должен оперировать сущностью в приложении. Для этого придумали "репозитории".
		6.1. Создаем пакет для репозиториев "repositories".
		6.2. В папке создается репозиторий "FruitRepository".
	7. Поскольку репозиторий это интерфейс, он ни чего не делает, он только объявляет методы
		необходим еще кто-то чтобы эти методы реализовать.
		Для этого придуман "сервис".
		7.1. Создаем пакет для сервисов "services"
		7.2. И сам сервис "FruitService"
	8. Сейчас внедряем зависимость.
		8.1. Нужно чтобы "сервис" был как то связан с "репозиторием".
			Необходимо внедрение зависимости, один из способов через конструктор.
		8.2. Дополняем сервис аннотацией и переменной. 
			final переменная репозитория.
			Внедряем зависимость через конструктор.
		8.3. Теперь можно реализовать метод из "репозитория".
			Дополняем сервис.
			Создаем публичный метод (любое название. В данном случае save).
			Метод на вход принимает сущность и сохраняет ее в базу.
			Еще один метод, достает все сущности из базы, достает из метода как список. 
	9. Осталось только реализовать в утилите.
		Переходим к классу InitiateUtils.
		9.1. Внедряем через конструктор фруктовыйсервис "FruitService".
		9.2. В методе "run" cоздаем несколько сущностей фруктов, через сеттеры заполняем поля.
		9.3. С помощью переменной сервиса вызываем методы сохранения в базу, 
			по разу для каждого объекта.
		9.4. Вытаскиваем базу обратно.
		9.5. выводим что получилось через for.

	Где же все таки hibernate?
	A hibernate выступает здесь в роли борца невидимого фронта, он сделал очень важную вешь: создал нам структуру БД.
	Вот когда мы в "сущности" написали поля, и пометили нужными аннотациями, Hibernate сделал свое дело.
	Hibernate умеет создавать структуру данных, хорош в создании связанных сущностей.





